{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Pode Pode is a Cross-Platform PowerShell framework that allows you to host REST APIs, Web Pages and SMTP/TCP servers. It also allows you to render dynamic files using .pode files, which is effectively embedded PowerShell, or other Third-Party template engines. Pode also has support for middleware, sessions, and authentication; as well as access and rate limiting features. Features Can run on Unix environments using PowerShell Core Host REST APIs and Web Pages Host TCP and SMTP server - great for tests and mocking Multiple threads can be used to response to incoming requests Use the full power of PowerShell, want a REST API for NUnit? Go for it! Ability to write dynamic files in PowerShell using Pode, or other third-party template engines Can use yarn package manager to install bootstrap, or other frontend libraries Setup async timers to be used as one off tasks, or for housekeeping services Ability to schedule async tasks using cron expressions Supports logging to CLI, Files, and custom loggers to other services like LogStash, etc. Cross-state runspace variable access for timers, routes and loggers Optional file monitoring to trigger internal server restart on file changes Ability to allow/deny requests from certain IP addresses and subnets Basic rate limiting for IP addresses and subnets Support for generating/binding self-signed certificates, and binding signed certificates Support for middleware on web servers Session middleware support on web requests Can use authentication on requests, which can either be sessionless or session persistant","title":"Home"},{"location":"#what-is-pode","text":"Pode is a Cross-Platform PowerShell framework that allows you to host REST APIs, Web Pages and SMTP/TCP servers. It also allows you to render dynamic files using .pode files, which is effectively embedded PowerShell, or other Third-Party template engines. Pode also has support for middleware, sessions, and authentication; as well as access and rate limiting features.","title":"What is Pode"},{"location":"#features","text":"Can run on Unix environments using PowerShell Core Host REST APIs and Web Pages Host TCP and SMTP server - great for tests and mocking Multiple threads can be used to response to incoming requests Use the full power of PowerShell, want a REST API for NUnit? Go for it! Ability to write dynamic files in PowerShell using Pode, or other third-party template engines Can use yarn package manager to install bootstrap, or other frontend libraries Setup async timers to be used as one off tasks, or for housekeeping services Ability to schedule async tasks using cron expressions Supports logging to CLI, Files, and custom loggers to other services like LogStash, etc. Cross-state runspace variable access for timers, routes and loggers Optional file monitoring to trigger internal server restart on file changes Ability to allow/deny requests from certain IP addresses and subnets Basic rate limiting for IP addresses and subnets Support for generating/binding self-signed certificates, and binding signed certificates Support for middleware on web servers Session middleware support on web requests Can use authentication on requests, which can either be sessionless or session persistant","title":"Features"},{"location":"navigation/","text":"Table of Contents Getting Started Installation CLI Docker Frontend Tutorials Routes Functions Attach Engine Listen Server Status View","title":"Table of Contents"},{"location":"navigation/#table-of-contents","text":"","title":"Table of Contents"},{"location":"navigation/#getting-started","text":"Installation CLI Docker Frontend","title":"Getting Started"},{"location":"navigation/#tutorials","text":"Routes","title":"Tutorials"},{"location":"navigation/#functions","text":"Attach Engine Listen Server Status View","title":"Functions"},{"location":"Functions/Attach/","text":"Attach Description The attach function allows you to attach files in the /public directory onto the web response. This allows the files to be downloaded by the end-user. Examples Example 1 The following example attaches the installer found at /public/downloads/installer.exe onto the response, when the http://localhost:8080/app/install endpoint is hit: Server { listen * : 8080 http route get '/app/install' { attach 'downloads/installer.exe' } } Parameters Name Type Required Description Default Path string true The path to the file to attach, relative to your /public directory null","title":"Attach"},{"location":"Functions/Attach/#attach","text":"","title":"Attach"},{"location":"Functions/Attach/#description","text":"The attach function allows you to attach files in the /public directory onto the web response. This allows the files to be downloaded by the end-user.","title":"Description"},{"location":"Functions/Attach/#examples","text":"","title":"Examples"},{"location":"Functions/Attach/#example-1","text":"The following example attaches the installer found at /public/downloads/installer.exe onto the response, when the http://localhost:8080/app/install endpoint is hit: Server { listen * : 8080 http route get '/app/install' { attach 'downloads/installer.exe' } }","title":"Example 1"},{"location":"Functions/Attach/#parameters","text":"Name Type Required Description Default Path string true The path to the file to attach, relative to your /public directory null","title":"Parameters"},{"location":"Functions/Engine/","text":"Engine Description The engine function allows you to specify the engine used to render view and content templates. You can also specify a third-party engine to use, such as EPS . Info If you don't use the engine function, then the defaut of HTML will be used Examples Example 1 The following example will render views and content using the Pode template engine (such as the index.pode view or the style.css.pode public content file): Server { engine pode } Example 2 The following example will use the third-party engine EPS to render views (such as the index.eps view or the style.css.eps public content file): Server { engine eps { param ( $path , $data ) return Invoke-EpsTemplate -Path $path -Binding $data } } Parameters Name Type Required Description Default Engine string true The type of engine to use, can be either HTML, Pode, or a custom third-party type - the value passed should be the extension used by the engine HTML ScriptBlock scriptblock false When using a third-party template engine, the ScriptBlock is required as it tells Pode how to render views/static content using the engine null","title":"Engine"},{"location":"Functions/Engine/#engine","text":"","title":"Engine"},{"location":"Functions/Engine/#description","text":"The engine function allows you to specify the engine used to render view and content templates. You can also specify a third-party engine to use, such as EPS . Info If you don't use the engine function, then the defaut of HTML will be used","title":"Description"},{"location":"Functions/Engine/#examples","text":"","title":"Examples"},{"location":"Functions/Engine/#example-1","text":"The following example will render views and content using the Pode template engine (such as the index.pode view or the style.css.pode public content file): Server { engine pode }","title":"Example 1"},{"location":"Functions/Engine/#example-2","text":"The following example will use the third-party engine EPS to render views (such as the index.eps view or the style.css.eps public content file): Server { engine eps { param ( $path , $data ) return Invoke-EpsTemplate -Path $path -Binding $data } }","title":"Example 2"},{"location":"Functions/Engine/#parameters","text":"Name Type Required Description Default Engine string true The type of engine to use, can be either HTML, Pode, or a custom third-party type - the value passed should be the extension used by the engine HTML ScriptBlock scriptblock false When using a third-party template engine, the ScriptBlock is required as it tells Pode how to render views/static content using the engine null","title":"Parameters"},{"location":"Functions/Listen/","text":"Listen Description The listen function allows you to specify the IP, Port and Protocol that your Server will listen on. If the protocol is https then you can also specify a certificate to bind, even having Pode create a self-signed certificate for you. Examples Example 1 The following example will listen on every IP over port 8080 for HTTP requests: Server { listen * : 8080 http } Info This will setup a web server and will require a route to be configured Example 2 The following example will listen on localhost over port 25 for SMTP requests: Server { listen 127 . 0 . 0 . 1 : 25 smtp } Info This will setup an SMTP server and will require a handler to be configured Example 3 The following example will listen on a specific IP address over port 8443 for HTTPS requests; it will also inform Pode to create and bind a self-signed certificate to the IP:Port: Server { listen 10 . 10 . 1 . 4 : 8443 https -cert self } Info This will setup a web server and will require a route to be configured Parameters Name Type Required Description Default IPPort string true The IP:Port combination that the server should listen on null Type string true The type of server: HTTP, HTTPS, SMTP, TCP null Cert string false The certificate to bind to the IP:Port. If the certificate is self then Pode will create a self-signed certificate. If the certificate is *.example.com then it must be installed to Cert:/LocalMachine/My null","title":"Listen"},{"location":"Functions/Listen/#listen","text":"","title":"Listen"},{"location":"Functions/Listen/#description","text":"The listen function allows you to specify the IP, Port and Protocol that your Server will listen on. If the protocol is https then you can also specify a certificate to bind, even having Pode create a self-signed certificate for you.","title":"Description"},{"location":"Functions/Listen/#examples","text":"","title":"Examples"},{"location":"Functions/Listen/#example-1","text":"The following example will listen on every IP over port 8080 for HTTP requests: Server { listen * : 8080 http } Info This will setup a web server and will require a route to be configured","title":"Example 1"},{"location":"Functions/Listen/#example-2","text":"The following example will listen on localhost over port 25 for SMTP requests: Server { listen 127 . 0 . 0 . 1 : 25 smtp } Info This will setup an SMTP server and will require a handler to be configured","title":"Example 2"},{"location":"Functions/Listen/#example-3","text":"The following example will listen on a specific IP address over port 8443 for HTTPS requests; it will also inform Pode to create and bind a self-signed certificate to the IP:Port: Server { listen 10 . 10 . 1 . 4 : 8443 https -cert self } Info This will setup a web server and will require a route to be configured","title":"Example 3"},{"location":"Functions/Listen/#parameters","text":"Name Type Required Description Default IPPort string true The IP:Port combination that the server should listen on null Type string true The type of server: HTTP, HTTPS, SMTP, TCP null Cert string false The certificate to bind to the IP:Port. If the certificate is self then Pode will create a self-signed certificate. If the certificate is *.example.com then it must be installed to Cert:/LocalMachine/My null","title":"Parameters"},{"location":"Functions/Server/","text":"Server Description The Server function is the most important function throughout all of Pode, as it's the only function that is mandatory in your scripts. Within the scriptblock supplied to the Server is where you place all of your main server logic - routes, timers, middleware, etc. Warning You can only have one Server declared within your script Examples Example 1 The following example will run the scriptblock once, printing out Hello, world! , and then exit: Server { Write-Host 'Hello, world!' } Example 2 The following will start a server that repeats the scriptblock every 5 seconds: Server -Interval 5 { Write-Host 'Hey!' } Example 3 The following server will accept web requests, and handle them across 2 threads rather than 1: Server -Thread 2 { # route logic } Example 4 The following server will restart when it detects a file has been changed. Ie, if you start the server and then alter a web page, or change a dot-sourced script, then the server will restart: Server -FileMonitor { # route logic } Parameters Name Type Required Description Default ScriptBlock scriptblock true The main closure that contains the core server logic null Interval int false Specifies, in seconds, the time to sleep before looping the ScriptBlock logic 0 Threads int false Specifies the number of runspaces used to handle incoming requests 1 DisableTermination switch false Toggles the ability to allow using Ctrl+C to terminate the server false DisableLogging switch false Toggles any logging that has been setup. When true all logging is disabled false FileMonitor switch false When passed, any file changes will cause the server to restart false","title":"Server"},{"location":"Functions/Server/#server","text":"","title":"Server"},{"location":"Functions/Server/#description","text":"The Server function is the most important function throughout all of Pode, as it's the only function that is mandatory in your scripts. Within the scriptblock supplied to the Server is where you place all of your main server logic - routes, timers, middleware, etc. Warning You can only have one Server declared within your script","title":"Description"},{"location":"Functions/Server/#examples","text":"","title":"Examples"},{"location":"Functions/Server/#example-1","text":"The following example will run the scriptblock once, printing out Hello, world! , and then exit: Server { Write-Host 'Hello, world!' }","title":"Example 1"},{"location":"Functions/Server/#example-2","text":"The following will start a server that repeats the scriptblock every 5 seconds: Server -Interval 5 { Write-Host 'Hey!' }","title":"Example 2"},{"location":"Functions/Server/#example-3","text":"The following server will accept web requests, and handle them across 2 threads rather than 1: Server -Thread 2 { # route logic }","title":"Example 3"},{"location":"Functions/Server/#example-4","text":"The following server will restart when it detects a file has been changed. Ie, if you start the server and then alter a web page, or change a dot-sourced script, then the server will restart: Server -FileMonitor { # route logic }","title":"Example 4"},{"location":"Functions/Server/#parameters","text":"Name Type Required Description Default ScriptBlock scriptblock true The main closure that contains the core server logic null Interval int false Specifies, in seconds, the time to sleep before looping the ScriptBlock logic 0 Threads int false Specifies the number of runspaces used to handle incoming requests 1 DisableTermination switch false Toggles the ability to allow using Ctrl+C to terminate the server false DisableLogging switch false Toggles any logging that has been setup. When true all logging is disabled false FileMonitor switch false When passed, any file changes will cause the server to restart false","title":"Parameters"},{"location":"Functions/Status/","text":"Status Description The status function allows you to specify a specific status code, and optional a status description. Examples Example 1 The following example sets the status code of the response to be 404: Server { listen * : 8080 http route get '/missing' { status 404 } } Example 2 The following example sets the status code and description of the response to be 500: Server { listen * : 8080 http route get '/error' { status 500 'Oh no! Something went wrong!' } } Parameters Name Type Required Description Default Code int true The status code to set on the web response 0 Description string false The status description to set on the response empty","title":"Status"},{"location":"Functions/Status/#status","text":"","title":"Status"},{"location":"Functions/Status/#description","text":"The status function allows you to specify a specific status code, and optional a status description.","title":"Description"},{"location":"Functions/Status/#examples","text":"","title":"Examples"},{"location":"Functions/Status/#example-1","text":"The following example sets the status code of the response to be 404: Server { listen * : 8080 http route get '/missing' { status 404 } }","title":"Example 1"},{"location":"Functions/Status/#example-2","text":"The following example sets the status code and description of the response to be 500: Server { listen * : 8080 http route get '/error' { status 500 'Oh no! Something went wrong!' } }","title":"Example 2"},{"location":"Functions/Status/#parameters","text":"Name Type Required Description Default Code int true The status code to set on the web response 0 Description string false The status description to set on the response empty","title":"Parameters"},{"location":"Functions/View/","text":"View Description The view function allows you to render any of the view files that you place within the /views directory. When you call view , Pode will automatically look within this directory. Pode uses a View Engine to either render HTML, Pode, or other types. Default is HTML, and you can change it to Pode by using the engine function. Examples Example 1 The following example will render the index.html view when you navigate to http://localhost:8080 : Server { listen * : 8080 http route get '/' { view 'index' } } Example 2 The following example will render the index.pode view when you navigate to http://localhost:8080 : Server { listen * : 8080 http engine pode route get '/' { view 'index' } } Example 3 The following example will render the index.pode view when you navigate to http://localhost:8080 , it will also supply dynamic data - in this case, the current date: > The dynamic data can be used in your pode view via `$($data.date)` Server { listen * : 8080 http engine pode route get '/' { view 'index' -d @{ 'date' = [DateTime] :: Now } } } Parameters Name Type Required Description Default Path string true The path to the view to render, relative to your /views directory null data hashtable false A hashtable of dynamic data that will be supplied to .pode , and other third-party template engines @{}","title":"View"},{"location":"Functions/View/#view","text":"","title":"View"},{"location":"Functions/View/#description","text":"The view function allows you to render any of the view files that you place within the /views directory. When you call view , Pode will automatically look within this directory. Pode uses a View Engine to either render HTML, Pode, or other types. Default is HTML, and you can change it to Pode by using the engine function.","title":"Description"},{"location":"Functions/View/#examples","text":"","title":"Examples"},{"location":"Functions/View/#example-1","text":"The following example will render the index.html view when you navigate to http://localhost:8080 : Server { listen * : 8080 http route get '/' { view 'index' } }","title":"Example 1"},{"location":"Functions/View/#example-2","text":"The following example will render the index.pode view when you navigate to http://localhost:8080 : Server { listen * : 8080 http engine pode route get '/' { view 'index' } }","title":"Example 2"},{"location":"Functions/View/#example-3","text":"The following example will render the index.pode view when you navigate to http://localhost:8080 , it will also supply dynamic data - in this case, the current date: > The dynamic data can be used in your pode view via `$($data.date)` Server { listen * : 8080 http engine pode route get '/' { view 'index' -d @{ 'date' = [DateTime] :: Now } } }","title":"Example 3"},{"location":"Functions/View/#parameters","text":"Name Type Required Description Default Path string true The path to the view to render, relative to your /views directory null data hashtable false A hashtable of dynamic data that will be supplied to .pode , and other third-party template engines @{}","title":"Parameters"},{"location":"Getting-Started/CLI/","text":"CLI Pode has some commands that you can utilise from the CLI - when your in a PowerShell terminal, or pwsh session. These commands help you to initialise, start, test, build, or install any packages for your repo/server. All of these commands are centered around the package.json format - similar to that of Node.js and Yarn. Info At the moment, Pode only uses the start , test , build and install properties of the scripts section in your package.json . You can still have others, like dependencies for Yarn Commands Build The build command will run the script found in the package.json file, at the scripts/build value: pode builid Init The init command will help you create a new package.json file from scratch. It will ask a few questions, such as author/name/etc, and then create the file for you: pode init Tip By default, Pode will pre-populate the test , build and install values using yarn , psake and pester respectively Install The install command will run the script found in the package.json file, at the scripts/install value: pode install Start The start command will run the script found in the package.json file, at the scripts/start value. If this value is not set, then this command will instead run the value under main : pode start Test The test command will run the script found in the package.json file, at the scripts/test value: pode test Package File The following is an example of a package.json file: { \"name\" : \"example\" , \"description\" : \"\" , \"version\" : \"1.0.0\" , \"main\" : \"./server.ps1\" , \"scripts\" : { \"start\" : \"./server.ps1\" , \"test\" : \"invoke-pester ./tests/*.ps1\" , \"install\" : \"yarn install --force --ignore-scripts --modules-folder pode_modules\" , \"build\" : \"psake\" }, \"author\" : \"Rick Sanchez\" , \"license\" : \"MIT\" }","title":"CLI"},{"location":"Getting-Started/CLI/#cli","text":"Pode has some commands that you can utilise from the CLI - when your in a PowerShell terminal, or pwsh session. These commands help you to initialise, start, test, build, or install any packages for your repo/server. All of these commands are centered around the package.json format - similar to that of Node.js and Yarn. Info At the moment, Pode only uses the start , test , build and install properties of the scripts section in your package.json . You can still have others, like dependencies for Yarn","title":"CLI"},{"location":"Getting-Started/CLI/#commands","text":"","title":"Commands"},{"location":"Getting-Started/CLI/#build","text":"The build command will run the script found in the package.json file, at the scripts/build value: pode builid","title":"Build"},{"location":"Getting-Started/CLI/#init","text":"The init command will help you create a new package.json file from scratch. It will ask a few questions, such as author/name/etc, and then create the file for you: pode init Tip By default, Pode will pre-populate the test , build and install values using yarn , psake and pester respectively","title":"Init"},{"location":"Getting-Started/CLI/#install","text":"The install command will run the script found in the package.json file, at the scripts/install value: pode install","title":"Install"},{"location":"Getting-Started/CLI/#start","text":"The start command will run the script found in the package.json file, at the scripts/start value. If this value is not set, then this command will instead run the value under main : pode start","title":"Start"},{"location":"Getting-Started/CLI/#test","text":"The test command will run the script found in the package.json file, at the scripts/test value: pode test","title":"Test"},{"location":"Getting-Started/CLI/#package-file","text":"The following is an example of a package.json file: { \"name\" : \"example\" , \"description\" : \"\" , \"version\" : \"1.0.0\" , \"main\" : \"./server.ps1\" , \"scripts\" : { \"start\" : \"./server.ps1\" , \"test\" : \"invoke-pester ./tests/*.ps1\" , \"install\" : \"yarn install --force --ignore-scripts --modules-folder pode_modules\" , \"build\" : \"psake\" }, \"author\" : \"Rick Sanchez\" , \"license\" : \"MIT\" }","title":"Package File"},{"location":"Getting-Started/Docker/","text":"Docker Pode has a Docker container that you can use, by calling docker pull badgerati/pode you can pull down the latest image. The image itself uses PowerShell Core on the Ubuntu Xenial OS. Dockerfile An example of using the Pode container in your Dockerfile could be as follows: Info The server script used below can be found in the examples/web-pages-docker.ps1 # pull down the pode image FROM badgerati/pode # copy over the local files to the container COPY . /usr/src/app/ # expose the port EXPOSE 8085 # run the server CMD [ \"pwsh\", \"-c\", \"cd /usr/src/app; ./web-pages-docker.ps1\" ] Build and Run To build and run the above Dockerfile, you can use the following commands: docker build -t pode/example docker run -p 8085 :8085 -d pode/example Info The Dockerfile above is the same Dockerfile in the examples/ directory Now try navigating to localhost:8085 (or calling curl localhost:8085 ) and you should be greeted with a \"Hello, world!\" page.","title":"Docker"},{"location":"Getting-Started/Docker/#docker","text":"Pode has a Docker container that you can use, by calling docker pull badgerati/pode you can pull down the latest image. The image itself uses PowerShell Core on the Ubuntu Xenial OS.","title":"Docker"},{"location":"Getting-Started/Docker/#dockerfile","text":"An example of using the Pode container in your Dockerfile could be as follows: Info The server script used below can be found in the examples/web-pages-docker.ps1 # pull down the pode image FROM badgerati/pode # copy over the local files to the container COPY . /usr/src/app/ # expose the port EXPOSE 8085 # run the server CMD [ \"pwsh\", \"-c\", \"cd /usr/src/app; ./web-pages-docker.ps1\" ]","title":"Dockerfile"},{"location":"Getting-Started/Docker/#build-and-run","text":"To build and run the above Dockerfile, you can use the following commands: docker build -t pode/example docker run -p 8085 :8085 -d pode/example Info The Dockerfile above is the same Dockerfile in the examples/ directory Now try navigating to localhost:8085 (or calling curl localhost:8085 ) and you should be greeted with a \"Hello, world!\" page.","title":"Build and Run"},{"location":"Getting-Started/Frontend/","text":"Frontend You can host web-pages using Pode, and to help you can also use package managers like yarn to install frontend libraries - like bootstrap. Using Yarn The following will install Yarn onto your machine: choco install yarn -y yarn init Once installed, you can use Yarn to download frontend libraries. The libraries will be added to a package.json file - which if you're using the Pode CLI, you'll already have in place. To install frontend libraries, you could use the following: yarn add bootstrap yarn add lodash Build via Pode Once you've added some libraries you can use pode install to trigger yarn . This will tell yarn to install the packages to a pode_modules directory. Info Other useful packages could include gulp , jquery , moment , etc.","title":"Frontend"},{"location":"Getting-Started/Frontend/#frontend","text":"You can host web-pages using Pode, and to help you can also use package managers like yarn to install frontend libraries - like bootstrap.","title":"Frontend"},{"location":"Getting-Started/Frontend/#using-yarn","text":"The following will install Yarn onto your machine: choco install yarn -y yarn init Once installed, you can use Yarn to download frontend libraries. The libraries will be added to a package.json file - which if you're using the Pode CLI, you'll already have in place. To install frontend libraries, you could use the following: yarn add bootstrap yarn add lodash","title":"Using Yarn"},{"location":"Getting-Started/Frontend/#build-via-pode","text":"Once you've added some libraries you can use pode install to trigger yarn . This will tell yarn to install the packages to a pode_modules directory. Info Other useful packages could include gulp , jquery , moment , etc.","title":"Build via Pode"},{"location":"Getting-Started/Installation/","text":"Installation Pode is a PowerShell module that can be installed from either Chocolatey, PowerShell Gallery, or Docker. Once installed, you can import the module into your PowerShell scripts. Chocolatey To install Pode via Chocolatey, the following command can be used: choco install pode PowerShell Gallery To install Pode from the PowerShell Gallery, you can use the following: Install-Module -Name Pode Docker Pode can run on Unix environments, therefore it only makes sense for there to be a Docker container for you to use! The container uses PowerShell Core on an Ubuntu Xenial container. To pull down the Pode container you can do: docker pull badgerati / pode Using the Module After you have installed the module, you can then import it into your server scripts: Import-Module Pode","title":"Installation"},{"location":"Getting-Started/Installation/#installation","text":"Pode is a PowerShell module that can be installed from either Chocolatey, PowerShell Gallery, or Docker. Once installed, you can import the module into your PowerShell scripts.","title":"Installation"},{"location":"Getting-Started/Installation/#chocolatey","text":"To install Pode via Chocolatey, the following command can be used: choco install pode","title":"Chocolatey"},{"location":"Getting-Started/Installation/#powershell-gallery","text":"To install Pode from the PowerShell Gallery, you can use the following: Install-Module -Name Pode","title":"PowerShell Gallery"},{"location":"Getting-Started/Installation/#docker","text":"Pode can run on Unix environments, therefore it only makes sense for there to be a Docker container for you to use! The container uses PowerShell Core on an Ubuntu Xenial container. To pull down the Pode container you can do: docker pull badgerati / pode","title":"Docker"},{"location":"Getting-Started/Installation/#using-the-module","text":"After you have installed the module, you can then import it into your server scripts: Import-Module Pode","title":"Using the Module"}]}